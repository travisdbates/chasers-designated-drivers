---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  ogImage?: string;
}

const { 
  title, 
  description = "Luxury designated driver service - Professional, reliable transportation for your special occasions.",
  keywords = "designated driver, luxury transportation, professional driver, safe ride, Arizona",
  ogImage = "/og-image.jpg"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'http://localhost:4321');
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage} />
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Title -->
    <title>{title}</title>
    
    <!-- Global Styles -->
    <style>
      /* Critical CSS for above-the-fold content */
      html {
        font-family: 'Overpass', system-ui, sans-serif;
      }
      
      body {
        margin: 0;
        background: #000000;
        color: #ffffff;
        overflow-x: hidden;
      }
      
      /* Loading state styles */
      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #000000;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        transition: opacity 0.5s ease-out;
      }
      
      .loading-spinner {
        width: 50px;
        height: 50px;
        border: 3px solid #2d2d2d;
        border-top: 3px solid #c69214;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Hide loading overlay when page is loaded */
      .loaded .loading-overlay {
        opacity: 0;
        pointer-events: none;
      }
    </style>
  </head>
  
  <body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay">
      <div class="loading-spinner"></div>
    </div>
    
    <!-- Main Content -->
    <main>
      <slot />
    </main>
    
    <!-- Scripts -->
    <script>
      // Remove loading overlay when page is fully loaded
      window.addEventListener('load', () => {
        document.body.classList.add('loaded');
        setTimeout(() => {
          const overlay = document.getElementById('loading-overlay');
          if (overlay) {
            overlay.remove();
          }
        }, 500);
      });
      
      // Smooth scrolling for anchor links
      document.addEventListener('DOMContentLoaded', () => {
        const links = document.querySelectorAll('a[href^="#"]');
        links.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href')?.substring(1);
            const targetElement = document.getElementById(targetId || '');
            if (targetElement) {
              targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          });
        });
      });
      
      // Add scroll-based animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in-up');
          }
        });
      }, observerOptions);
      
      // Observe elements with animation classes
      document.addEventListener('DOMContentLoaded', () => {
        const animatedElements = document.querySelectorAll('.animate-on-scroll');
        animatedElements.forEach(el => observer.observe(el));
      });
    </script>
    
    <!-- Google Analytics (add your GA4 tracking ID) -->
    <!-- 
    <script async src="https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'GA_TRACKING_ID');
    </script>
    -->
  </body>
</html>

<style is:global>
  @import '../styles/global.css';
</style>