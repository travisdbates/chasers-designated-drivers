---
export interface Props {
  planId: string;
  plan: any;
  onBack?: () => void;
}

const { planId, plan, onBack } = Astro.props;

// Get MiCamp configuration from environment
const TOKENIZATION_KEY = import.meta.env.PUBLIC_ACCEPTBLUE_TOKENIZATION_KEY;
const BASE_URL = import.meta.env.PUBLIC_MICAMP_BASE_URL;
const ENVIRONMENT = import.meta.env.PUBLIC_ACCEPTBLUE_ENVIRONMENT || "sandbox";
---

<div
  class="secure-payment-container bg-off-white border border-off-white rounded-xl p-6 shadow-lg"
>
  <form id="secure-payment-form" class="space-y-6">
    <!-- Customer Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900">Customer Information</h3>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="firstName" class="form-label">First Name</label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            required
            class="form-input w-full"
            placeholder="Enter your first name"
          />
        </div>
        <div>
          <label for="lastName" class="form-label">Last Name</label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            required
            class="form-input w-full"
            placeholder="Enter your last name"
          />
        </div>
      </div>

      <div>
        <label for="email" class="form-label">Email Address</label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class="form-input w-full"
          placeholder="your.email@example.com"
        />
      </div>

      <div>
        <label for="phone" class="form-label">Phone Number</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          required
          class="form-input w-full"
          placeholder="(480) 555-0123"
        />
      </div>

      <div>
        <label for="address" class="form-label">Address</label>
        <input
          type="text"
          id="address"
          name="address"
          required
          class="form-input w-full"
          placeholder="123 Main Street"
        />
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label for="city" class="form-label">City</label>
          <input
            type="text"
            id="city"
            name="city"
            required
            class="form-input w-full"
            placeholder="City"
          />
        </div>
        <div>
          <label for="state" class="form-label">State</label>
          <select id="state" name="state" required class="form-input w-full">
            <option value="AZ" selected>Arizona</option>
            <option value="CA">California</option>
            <option value="TX">Texas</option>
            <!-- Add more states as needed -->
          </select>
        </div>
        <div>
          <label for="zipCode" class="form-label">ZIP Code</label>
          <input
            type="text"
            id="zipCode"
            name="zipCode"
            required
            class="form-input w-full"
            placeholder="ZIP Code"
          />
        </div>
      </div>
    </div>

    <!-- Secure Payment Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900">
        🔒 Secure Payment Information
        <span class="text-sm font-normal text-gray-600 block"
          >Powered by AcceptBlue - Your card data is secure</span
        >
      </h3>

      <!-- Direct Card Processing Form -->
      <div id="direct-card-form" class="space-y-4">
        <div>
          <label for="cardNumber" class="form-label">Card Number</label>
          <input
            type="text"
            id="cardNumber"
            name="cardNumber"
            placeholder="4111 1111 1111 1111"
            class="form-input w-full"
            maxlength="19"
          />
        </div>

        <div class="grid grid-cols-3 gap-4">
          <div>
            <label for="expiryMonth" class="form-label">Month</label>
            <select
              id="expiryMonth"
              name="expiryMonth"
              class="form-input w-full"
            >
              <option value="">MM</option>
              <option value="01">01</option>
              <option value="02">02</option>
              <option value="03">03</option>
              <option value="04">04</option>
              <option value="05">05</option>
              <option value="06">06</option>
              <option value="07">07</option>
              <option value="08">08</option>
              <option value="09">09</option>
              <option value="10">10</option>
              <option value="11">11</option>
              <option value="12">12</option>
            </select>
          </div>
          <div>
            <label for="expiryYear" class="form-label">Year</label>
            <select id="expiryYear" name="expiryYear" class="form-input w-full">
              <option value="">YYYY</option>
              <option value="2024">2024</option>
              <option value="2025">2025</option>
              <option value="2026">2026</option>
              <option value="2027">2027</option>
              <option value="2028">2028</option>
              <option value="2029">2029</option>
              <option value="2030">2030</option>
              <option value="2031">2031</option>
              <option value="2032">2032</option>
              <option value="2033">2033</option>
              <option value="2034">2034</option>
            </select>
          </div>
          <div>
            <label for="cvv" class="form-label">CVV</label>
            <input
              type="text"
              id="cvv"
              name="cvv"
              placeholder="123"
              class="form-input w-full"
              maxlength="4"
            />
          </div>
        </div>
      </div>

      <!-- Error Message Display -->
      <div
        id="payment-error"
        class="error-message hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg"
      >
      </div>

      <!-- Card Info Display (will show masked card info as user types) -->
      <div
        id="card-info"
        class="card-info hidden bg-gray-50 border border-gray-200 rounded-lg p-4"
      >
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            Card Type: <span id="card-type" class="font-semibold">-</span>
          </div>
          <div>
            Masked Card: <span id="masked-card" class="font-semibold">-</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Billing Address -->
    <div class="space-y-4">
      <div class="flex items-center">
        <input
          type="checkbox"
          id="sameBillingAddress"
          name="sameBillingAddress"
          checked
          class="mr-2"
        />
        <label for="sameBillingAddress" class="text-sm text-gray-700"
          >Billing address is the same as customer address</label
        >
      </div>

      <!-- Separate Billing Address Form (hidden by default) -->
      <div id="billingAddressForm" class="hidden space-y-4">
        <h4 class="text-md font-semibold text-gray-900">Billing Address</h4>

        <div>
          <label for="billingAddress" class="form-label">Billing Address</label>
          <input
            type="text"
            id="billingAddress"
            name="billingAddress"
            class="form-input w-full"
            placeholder="123 Billing Street"
          />
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label for="billingCity" class="form-label">Billing City</label>
            <input
              type="text"
              id="billingCity"
              name="billingCity"
              class="form-input w-full"
              placeholder="City"
            />
          </div>
          <div>
            <label for="billingState" class="form-label">Billing State</label>
            <select id="billingState" name="billingState" class="form-input w-full">
              <option value="">Select State</option>
              <option value="AZ">Arizona</option>
              <option value="CA">California</option>
              <option value="TX">Texas</option>
              <option value="NV">Nevada</option>
              <option value="UT">Utah</option>
              <option value="CO">Colorado</option>
              <option value="NM">New Mexico</option>
              <!-- Add more states as needed -->
            </select>
          </div>
          <div>
            <label for="billingZipCode" class="form-label">Billing ZIP Code</label>
            <input
              type="text"
              id="billingZipCode"
              name="billingZipCode"
              class="form-input w-full"
              placeholder="ZIP Code"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Marketing Consent -->
    <div class="space-y-2">
      <div class="flex items-center">
        <input
          type="checkbox"
          id="emailMarketingConsent"
          name="emailMarketingConsent"
          class="mr-2"
        />
        <label for="emailMarketingConsent" class="text-sm text-gray-700"
          >I would like to receive promotional emails</label
        >
      </div>
      <div class="flex items-center">
        <input
          type="checkbox"
          id="smsMarketingConsent"
          name="smsMarketingConsent"
          class="mr-2"
        />
        <label for="smsMarketingConsent" class="text-sm text-gray-700"
          >I would like to receive promotional SMS messages</label
        >
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex flex-col sm:flex-row gap-4 pt-4">
      {
        onBack && (
          <button
            type="button"
            onclick={onBack}
            class="btn-secondary order-2 sm:order-1"
          >
            ← Back to Plans
          </button>
        )
      }
      <button
        type="button"
        id="process-payment-btn"
        disabled
        class="btn-primary order-1 sm:order-2 flex-1"
      >
        <span class="processing-text hidden">Processing...</span>
        <span class="default-text">Complete Payment</span>
      </button>
    </div>
  </form>
</div>

<!-- Processing Modal -->
<div
  id="processing-modal"
  class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center"
>
  <div class="bg-off-white rounded-xl p-8 max-w-md mx-4">
    <div class="text-center">
      <div
        class="animate-spin rounded-full h-12 w-12 border-b-2 border-gold-primary mx-auto mb-4"
      >
      </div>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">
        Processing Your Payment
      </h3>
      <p class="text-gray-600">
        Please wait while we securely process your membership...
      </p>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div
  id="success-modal"
  class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center"
>
  <div class="bg-off-white rounded-xl p-8 max-w-md mx-4">
    <div class="text-center">
      <div
        class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-6 h-6 text-green-500"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            fill-rule="evenodd"
            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">
        Payment Successful!
      </h3>
      <p class="text-gray-600 mb-4">
        Thank you for joining Chasers DD! Your membership is now active and
        you'll receive confirmation via email and SMS.
      </p>
      <button
        onclick="redirectToHome()"
        class="bg-gold-primary text-white px-6 py-2 rounded-lg hover:bg-gold-light transition-colors"
      >
        Continue to Home
      </button>
    </div>
  </div>
</div>

<script define:vars={{ TOKENIZATION_KEY, BASE_URL, ENVIRONMENT, planId, plan }}>
  let hostedTokenization = null;

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initializeSecurePayment);

  function initializeSecurePayment() {
    console.log("Initializing Direct Payment Processing");

    // Set up direct card input formatting
    setupDirectCardInputs();

    // Set up billing address toggle
    setupBillingAddressToggle();

    // Enable payment button
    const processButton = document.getElementById("process-payment-btn");
    if (processButton) {
      processButton.disabled = false;
    }
  }

  function setupDirectCardInputs() {
    // Set up card number formatting for direct processing
    const cardNumberInput = document.getElementById("cardNumber");
    if (cardNumberInput) {
      cardNumberInput.addEventListener("input", formatCardNumber);
    }

    const cvvInput = document.getElementById("cvv");
    if (cvvInput) {
      cvvInput.addEventListener("input", formatCvv);
    }

    // Set up payment button event listener
    const processButton = document.getElementById("process-payment-btn");
    if (processButton) {
      processButton.addEventListener("click", (e) => {
        e.preventDefault(); // Prevent any form submission
        console.log("Payment button clicked!");
        handleSecurePayment();
      });
      console.log("Payment button event listener attached");
    } else {
      console.error("Payment button not found!");
    }
  }

  function formatCardNumber(e) {
    let value = e.target.value.replace(/\s/g, "").replace(/[^0-9]/gi, "");
    let formattedValue = value.match(/.{1,4}/g)?.join(" ") || "";
    if (formattedValue.length > 19) {
      formattedValue = formattedValue.substring(0, 19);
    }
    e.target.value = formattedValue;
  }

  function formatCvv(e) {
    let value = e.target.value.replace(/[^0-9]/g, "");
    e.target.value = value;
  }

  function setupBillingAddressToggle() {
    const sameBillingCheckbox = document.getElementById("sameBillingAddress");
    const billingForm = document.getElementById("billingAddressForm");

    if (sameBillingCheckbox && billingForm) {
      sameBillingCheckbox.addEventListener("change", function() {
        if (this.checked) {
          billingForm.classList.add("hidden");
          // Clear billing form values when hiding
          clearBillingForm();
        } else {
          billingForm.classList.remove("hidden");
          // Copy customer address to billing form as default
          copyCustomerToBilling();
        }
      });
    }
  }

  function clearBillingForm() {
    document.getElementById("billingAddress").value = "";
    document.getElementById("billingCity").value = "";
    document.getElementById("billingState").value = "";
    document.getElementById("billingZipCode").value = "";
  }

  function copyCustomerToBilling() {
    // Copy customer address as default billing address
    document.getElementById("billingAddress").value = document.getElementById("address").value;
    document.getElementById("billingCity").value = document.getElementById("city").value;
    document.getElementById("billingState").value = document.getElementById("state").value;
    document.getElementById("billingZipCode").value = document.getElementById("zipCode").value;
  }

  function getBillingAddressData() {
    const sameBillingAddress = document.getElementById("sameBillingAddress").checked;

    if (sameBillingAddress) {
      // Use customer address as billing address
      return {
        sameBillingAddress: true,
        address: document.getElementById("address").value,
        city: document.getElementById("city").value,
        state: document.getElementById("state").value,
        zipCode: document.getElementById("zipCode").value
      };
    } else {
      // Use separate billing address
      return {
        sameBillingAddress: false,
        address: document.getElementById("billingAddress").value,
        city: document.getElementById("billingCity").value,
        state: document.getElementById("billingState").value,
        zipCode: document.getElementById("billingZipCode").value
      };
    }
  }

  function validateForm() {
    const errors = [];

    // Validate customer information
    const requiredFields = [
      { id: 'firstName', name: 'First Name' },
      { id: 'lastName', name: 'Last Name' },
      { id: 'email', name: 'Email Address' },
      { id: 'phone', name: 'Phone Number' },
      { id: 'address', name: 'Address' },
      { id: 'city', name: 'City' },
      { id: 'state', name: 'State' },
      { id: 'zipCode', name: 'ZIP Code' }
    ];

    // Check required customer fields
    requiredFields.forEach(field => {
      const element = document.getElementById(field.id);
      if (!element || !element.value.trim()) {
        errors.push(`${field.name} is required`);
      }
    });

    // Validate email format
    const email = document.getElementById('email').value;
    if (email && !isValidEmail(email)) {
      errors.push('Please enter a valid email address');
    }

    // Validate phone format
    const phone = document.getElementById('phone').value;
    if (phone && !isValidPhone(phone)) {
      errors.push('Please enter a valid phone number');
    }

    // Validate ZIP code format
    const zipCode = document.getElementById('zipCode').value;
    if (zipCode && !isValidZipCode(zipCode)) {
      errors.push('Please enter a valid ZIP code');
    }

    // Validate card information
    const cardNumber = document.getElementById('cardNumber').value.replace(/\s/g, '');
    const expiryMonth = document.getElementById('expiryMonth').value;
    const expiryYear = document.getElementById('expiryYear').value;
    const cvv = document.getElementById('cvv').value;

    if (!cardNumber) {
      errors.push('Card number is required');
    } else if (cardNumber.length < 13 || cardNumber.length > 19) {
      errors.push('Please enter a valid card number');
    }

    if (!expiryMonth) {
      errors.push('Expiry month is required');
    }

    if (!expiryYear) {
      errors.push('Expiry year is required');
    }

    if (!cvv) {
      errors.push('CVV is required');
    } else if (cvv.length < 3 || cvv.length > 4) {
      errors.push('Please enter a valid CVV (3-4 digits)');
    }

    // Validate expiry date is not in the past
    if (expiryMonth && expiryYear) {
      const currentDate = new Date();
      const currentYear = currentDate.getFullYear();
      const currentMonth = currentDate.getMonth() + 1;
      const expYear = parseInt(expiryYear);
      const expMonth = parseInt(expiryMonth);

      if (expYear < currentYear || (expYear === currentYear && expMonth < currentMonth)) {
        errors.push('Card expiry date cannot be in the past');
      }
    }

    // Validate billing address if separate billing is selected
    const sameBillingAddress = document.getElementById('sameBillingAddress').checked;
    if (!sameBillingAddress) {
      const billingRequiredFields = [
        { id: 'billingAddress', name: 'Billing Address' },
        { id: 'billingCity', name: 'Billing City' },
        { id: 'billingState', name: 'Billing State' },
        { id: 'billingZipCode', name: 'Billing ZIP Code' }
      ];

      billingRequiredFields.forEach(field => {
        const element = document.getElementById(field.id);
        if (!element || !element.value.trim()) {
          errors.push(`${field.name} is required`);
        }
      });

      // Validate billing ZIP code format
      const billingZipCode = document.getElementById('billingZipCode').value;
      if (billingZipCode && !isValidZipCode(billingZipCode)) {
        errors.push('Please enter a valid billing ZIP code');
      }
    }

    return errors;
  }

  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function isValidPhone(phone) {
    // Remove all non-digits
    const phoneDigits = phone.replace(/\D/g, '');
    // Check if it's 10 digits (US format) or 11 digits (with country code)
    return phoneDigits.length === 10 || phoneDigits.length === 11;
  }

  function isValidZipCode(zipCode) {
    // US ZIP code format: 5 digits or 5+4 format
    const zipRegex = /^\d{5}(-\d{4})?$/;
    return zipRegex.test(zipCode);
  }

  async function handleSecurePayment() {
    console.log("🚀 =============== PAYMENT BUTTON CLICKED ===============");
    console.log("⏰ Frontend Timestamp:", new Date().toISOString());

    const processingModal = document.getElementById("processing-modal");
    const successModal = document.getElementById("success-modal");
    const errorDiv = document.getElementById("payment-error");
    const processButton = document.getElementById("process-payment-btn");

    try {
      console.log("💻 Starting payment processing...");

      // Validate form before processing
      console.log("✅ Validating form data...");
      const validationErrors = validateForm();
      if (validationErrors.length > 0) {
        console.log("❌ Validation failed:", validationErrors);
        throw new Error(validationErrors.join('; '));
      }
      console.log("✅ Form validation passed");

      processButton.disabled = true;
      errorDiv.classList.add("hidden");
      processingModal.classList.remove("hidden");

      // Collect customer data
      console.log("📋 Collecting customer data from form...");
      const customerData = {
        firstName: document.getElementById("firstName").value,
        lastName: document.getElementById("lastName").value,
        email: document.getElementById("email").value,
        phone: document.getElementById("phone").value,
        address: document.getElementById("address").value,
        city: document.getElementById("city").value,
        state: document.getElementById("state").value,
        zipCode: document.getElementById("zipCode").value,
      };
      console.log("👤 Customer data collected:", customerData);

      // Use direct card processing only
      console.log("💳 Collecting card data from form...");
      console.log("Processing payment with direct card data...");

      // Collect validated card fields
      const cardNumber = document
        .getElementById("cardNumber")
        .value.replace(/\s/g, "");
      const expiryMonth = document.getElementById("expiryMonth").value;
      const expiryYear = document.getElementById("expiryYear").value;
      const cvv = document.getElementById("cvv").value;

      const paymentData = {
        planId,
        customer: customerData,
        // Direct card fields (flat structure for v2 API)
        cardNumber: cardNumber,
        expiryMonth: expiryMonth,
        expiryYear: expiryYear,
        cvv: cvv,
        billing: getBillingAddressData(),
        marketing: {
          emailConsent: document.getElementById("emailMarketingConsent")
            .checked,
          smsConsent: document.getElementById("smsMarketingConsent").checked,
        },
        plan,
      };

      console.log("📦 Payment data prepared:", {
        planId: paymentData.planId,
        hasCustomer: !!paymentData.customer,
        customerEmail: paymentData.customer.email,
        cardNumber: "****" + cardNumber.slice(-4),
        hasExpiry: !!paymentData.expiryMonth && !!paymentData.expiryYear,
        hasCvv: !!paymentData.cvv,
        planName: paymentData.plan?.name,
      });
      console.log("📝 Full payment data (with sensitive info):", paymentData);

      console.log("🌐 Sending request to /api/process-payment...");
      const response = await fetch("/api/process-payment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(paymentData),
      });

      console.log("📡 Response received from server");
      console.log("📊 Response status:", response.status);
      console.log("📊 Response status text:", response.statusText);
      console.log("📊 Response headers:", Object.fromEntries(response.headers));

      const result = await response.json();

      if (result.success) {
        processingModal.classList.add("hidden");
        successModal.classList.remove("hidden");

        // Disable the form to prevent double submission
        disableForm();
      } else {
        console.error("Payment processing failed:", result);
        if (result.debug) {
          console.error("Debug info - Request sent:", result.debug.sentRequest);
          console.error(
            "Debug info - API Response:",
            result.debug.fullResponse
          );
        }
        throw new Error(result.error || "Payment failed");
      }
    } catch (error) {
      console.error("Payment processing error:", error);
      processingModal.classList.add("hidden");
      showError(error.message || "Payment processing failed");
    } finally {
      processButton.disabled = false;
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById("payment-error");

    // Handle multiple errors separated by semicolon
    if (message.includes(';')) {
      const errors = message.split(';');
      errorDiv.innerHTML = '<ul class="list-disc ml-4">' +
        errors.map(error => `<li>${error.trim()}</li>`).join('') +
        '</ul>';
    } else {
      errorDiv.textContent = message;
    }

    errorDiv.classList.remove("hidden");

    // Scroll error message into view
    errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  function disableForm() {
    // Disable all form inputs and buttons
    const form = document.getElementById('secure-payment-form');
    if (form) {
      const inputs = form.querySelectorAll('input, select, button');
      inputs.forEach(input => {
        input.disabled = true;
      });

      // Add visual indication that form is disabled
      form.style.opacity = '0.6';
      form.style.pointerEvents = 'none';
    }

    // Show success message on the form
    const formContainer = document.querySelector('.secure-payment-container');
    if (formContainer) {
      const successBanner = document.createElement('div');
      successBanner.className = 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4';
      successBanner.innerHTML = `
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
          <span><strong>Payment Successful!</strong> Your membership is being processed.</span>
        </div>
      `;
      formContainer.insertBefore(successBanner, formContainer.firstChild);
    }
  }

  function redirectToHome() {
    // Close the modal first
    const successModal = document.getElementById('success-modal');
    if (successModal) {
      successModal.classList.add('hidden');
    }

    // Redirect to home page after a brief delay
    setTimeout(() => {
      window.location.href = '/';
    }, 500);
  }

  // Make redirectToHome available globally for the onclick handler
  window.redirectToHome = redirectToHome;
</script>

<style>
  .error-message:empty {
    display: none;
  }

  .processing-text {
    display: none;
  }

  button:disabled .processing-text {
    display: inline;
  }

  button:disabled .default-text {
    display: none;
  }

  /* Style the iframe container */
  #micamp-iframe-container iframe {
    border: none !important;
    width: 100% !important;
    min-height: 200px !important;
  }
</style>
