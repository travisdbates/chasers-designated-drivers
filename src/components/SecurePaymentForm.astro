---
export interface Props {
  planId: string;
  plan: any;
  onBack?: () => void;
}

const { planId, plan, onBack } = Astro.props;

// Get MiCamp configuration from environment
const TOKENIZATION_KEY = import.meta.env.PUBLIC_ACCEPTBLUE_TOKENIZATION_KEY;
const BASE_URL = import.meta.env.PUBLIC_MICAMP_BASE_URL;
const ENVIRONMENT = import.meta.env.PUBLIC_ACCEPTBLUE_ENVIRONMENT || 'sandbox';
---

<div class="secure-payment-container bg-off-white border border-off-white rounded-xl p-6 shadow-lg">
  <form id="secure-payment-form" class="space-y-6">
    <!-- Customer Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900">Customer Information</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="firstName" class="form-label">First Name</label>
          <input type="text" id="firstName" name="firstName" required class="form-input w-full" value="John" placeholder="John" />
        </div>
        <div>
          <label for="lastName" class="form-label">Last Name</label>
          <input type="text" id="lastName" name="lastName" required class="form-input w-full" value="Doe" placeholder="Doe" />
        </div>
      </div>
      
      <div>
        <label for="email" class="form-label">Email Address</label>
        <input type="email" id="email" name="email" required class="form-input w-full" value="john@example.com" placeholder="john@example.com" />
      </div>
      
      <div>
        <label for="phone" class="form-label">Phone Number</label>
        <input type="tel" id="phone" name="phone" required class="form-input w-full" value="(480) 555-0123" placeholder="(480) 555-0123" />
      </div>
      
      <div>
        <label for="address" class="form-label">Address</label>
        <input type="text" id="address" name="address" required class="form-input w-full" value="123 Main St" placeholder="123 Main St" />
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label for="city" class="form-label">City</label>
          <input type="text" id="city" name="city" required class="form-input w-full" value="Phoenix" placeholder="Phoenix" />
        </div>
        <div>
          <label for="state" class="form-label">State</label>
          <select id="state" name="state" required class="form-input w-full">
            <option value="AZ" selected>Arizona</option>
            <option value="CA">California</option>
            <option value="TX">Texas</option>
            <!-- Add more states as needed -->
          </select>
        </div>
        <div>
          <label for="zipCode" class="form-label">ZIP Code</label>
          <input type="text" id="zipCode" name="zipCode" required class="form-input w-full" value="85001" placeholder="85001" />
        </div>
      </div>
    </div>

    <!-- Secure Payment Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900">
        üîí Secure Payment Information
        <span class="text-sm font-normal text-gray-600 block">Powered by AcceptBlue - Your card data is secure</span>
      </h3>
      
      <!-- MiCamp Hosted Tokenization Iframe Container -->
      <div id="micamp-iframe-container" class="border-2 border-dashed border-gold-primary/30 rounded-lg p-4 min-h-[200px] bg-gradient-to-br from-gold-primary/5 to-gold-light/5">
        <div class="text-center text-gray-500">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gold-primary mx-auto mb-2"></div>
          <p>Loading secure payment form...</p>
        </div>
      </div>
      
      <!-- Error Message Display -->
      <div id="payment-error" class="error-message hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg"></div>
      
      <!-- Card Info Display (will show masked card info as user types) -->
      <div id="card-info" class="card-info hidden bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>Card Type: <span id="card-type" class="font-semibold">-</span></div>
          <div>Masked Card: <span id="masked-card" class="font-semibold">-</span></div>
        </div>
      </div>
    </div>

    <!-- Billing Address -->
    <div class="space-y-4">
      <div class="flex items-center">
        <input type="checkbox" id="sameBillingAddress" name="sameBillingAddress" checked class="mr-2" />
        <label for="sameBillingAddress" class="text-sm text-gray-700">Billing address is the same as customer address</label>
      </div>
    </div>

    <!-- Marketing Consent -->
    <div class="space-y-2">
      <div class="flex items-center">
        <input type="checkbox" id="emailMarketingConsent" name="emailMarketingConsent" class="mr-2" />
        <label for="emailMarketingConsent" class="text-sm text-gray-700">I would like to receive promotional emails</label>
      </div>
      <div class="flex items-center">
        <input type="checkbox" id="smsMarketingConsent" name="smsMarketingConsent" class="mr-2" />
        <label for="smsMarketingConsent" class="text-sm text-gray-700">I would like to receive promotional SMS messages</label>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex flex-col sm:flex-row gap-4 pt-4">
      {onBack && (
        <button type="button" onclick={onBack} class="btn-secondary order-2 sm:order-1">
          ‚Üê Back to Plans
        </button>
      )}
      <button type="button" id="process-payment-btn" disabled class="btn-primary order-1 sm:order-2 flex-1">
        <span class="processing-text hidden">Processing...</span>
        <span class="default-text">Complete Payment</span>
      </button>
    </div>
  </form>
</div>

<!-- Processing Modal -->
<div id="processing-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
  <div class="bg-off-white rounded-xl p-8 max-w-md mx-4">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gold-primary mx-auto mb-4"></div>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">Processing Your Payment</h3>
      <p class="text-gray-600">Please wait while we securely process your membership...</p>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div id="success-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
  <div class="bg-off-white rounded-xl p-8 max-w-md mx-4">
    <div class="text-center">
      <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-6 h-6 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">Payment Successful!</h3>
      <p class="text-gray-600 mb-4">Thank you for joining Chasers DD! Your membership is now active and you'll receive confirmation via email and SMS.</p>
      <button 
        onclick="document.getElementById('success-modal').classList.add('hidden')"
        class="bg-gold-primary text-white px-6 py-2 rounded-lg hover:bg-gold-light transition-colors"
      >
        Close
      </button>
    </div>
  </div>
</div>

<script define:vars={{ TOKENIZATION_KEY, BASE_URL, ENVIRONMENT, planId, plan }}>
  let hostedTokenization = null;

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeSecurePayment);

  function initializeSecurePayment() {
    console.log('Initializing MiCamp Hosted Tokenization with:', {
      hasKey: !!TOKENIZATION_KEY,
      environment: ENVIRONMENT,
      keyPreview: TOKENIZATION_KEY ? TOKENIZATION_KEY.substring(0, 8) + '...' : 'missing'
    });

    if (!TOKENIZATION_KEY) {
      console.error('MiCamp tokenization key not found');
      showError('Payment system configuration error');
      return;
    }

    // Load the MiCamp tokenization library
    const script = document.createElement('script');
    script.src = `${BASE_URL}/tokenization/v0.3`;
    script.onload = initializeMiCampTokenization;
    script.onerror = handleScriptLoadError;
    document.head.appendChild(script);
  }

  function initializeMiCampTokenization() {
    console.log('MiCamp script loaded, initializing tokenization...');

    try {
      // Check if HostedTokenization is available
      if (typeof window.HostedTokenization === 'undefined') {
        throw new Error('HostedTokenization not available');
      }

      const options = {
        target: '#micamp-iframe-container',
        showZip: true,
        requireCvv2: true,
        styles: {
          card: 'padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px;',
          cvv2: 'padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px;',
          expiryMonth: 'padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px;',
          expiryYear: 'padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px;',
          avsZip: 'padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px;',
          labels: 'font-weight: 600; margin-bottom: 8px; color: #374151;',
          container: 'margin: 16px 0;'
        }
      };

      hostedTokenization = new window.HostedTokenization(TOKENIZATION_KEY, options);
      setupTokenizationEventListeners();

    } catch (error) {
      console.error('MiCamp tokenization initialization failed:', error);
      handleScriptLoadError();
    }
  }

  function handleScriptLoadError() {
    console.error('MiCamp HostedTokenization library failed to load');
    showErrorState();
  }

  function showErrorState() {
    const container = document.getElementById('micamp-iframe-container');
    const processButton = document.getElementById('process-payment-btn');
    
    if (container) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="bg-red-50 border border-red-200 rounded-lg p-6">
            <div class="flex items-center justify-center w-12 h-12 bg-red-100 rounded-full mx-auto mb-4">
              <svg class="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-red-900 mb-2">Payment System Unavailable</h3>
            <p class="text-red-700 mb-4">Unable to load secure payment processing. Please try refreshing the page or contact support.</p>
            <div class="text-sm text-red-600">
              <p>Support: <a href="tel:+14806953659" class="underline">(480) 695-3659</a></p>
              <p>Email: <a href="mailto:memberships@chasersdd.com" class="underline">memberships@chasersdd.com</a></p>
            </div>
          </div>
        </div>
      `;
    }
    
    // Disable payment button permanently - no fallback processing
    if (processButton) {
      processButton.disabled = true;
      processButton.textContent = 'Payment Unavailable';
      processButton.classList.remove('btn-primary');
      processButton.classList.add('bg-gray-400', 'cursor-not-allowed');
    }
  }

  function setupTokenizationEventListeners() {
    const processButton = document.getElementById('process-payment-btn');
    const errorDiv = document.getElementById('payment-error');
    const cardInfoDiv = document.getElementById('card-info');
    const maskedCardSpan = document.getElementById('masked-card');
    const cardTypeSpan = document.getElementById('card-type');

    // Listen for tokenization events
    hostedTokenization
      .on('input', handleCardInput)
      .on('change', handleCardInput)
      .on('ready', () => {
        console.log('MiCamp tokenization iframe ready');
        processButton.disabled = false;
        // Hide loading spinner in iframe container
        const container = document.getElementById('micamp-iframe-container');
        if (container) {
          container.style.border = '1px solid #d1d5db';
          container.style.background = '#ffffff';
        }
      });

    // Process payment button
    processButton.addEventListener('click', handleSecurePayment);
  }

  function handleCardInput(event) {
    const errorDiv = document.getElementById('payment-error');
    const cardInfoDiv = document.getElementById('card-info');
    const maskedCardSpan = document.getElementById('masked-card');
    const cardTypeSpan = document.getElementById('card-type');
    
    if (event.error) {
      errorDiv.textContent = event.error.message || 'Invalid card data';
      errorDiv.classList.remove('hidden');
    } else {
      errorDiv.classList.add('hidden');
    }
    
    if (event.result) {
      maskedCardSpan.textContent = event.result.maskedCard || '-';
      cardTypeSpan.textContent = event.result.cardType || '-';
      
      if (event.result.maskedCard) {
        cardInfoDiv.classList.remove('hidden');
      }
    }
  }

  async function handleSecurePayment() {
    const processingModal = document.getElementById('processing-modal');
    const successModal = document.getElementById('success-modal');
    const errorDiv = document.getElementById('payment-error');
    const processButton = document.getElementById('process-payment-btn');
    
    try {
      processButton.disabled = true;
      errorDiv.classList.add('hidden');
      processingModal.classList.remove('hidden');

      // Collect customer data
      const customerData = {
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        email: document.getElementById('email').value,
        phone: document.getElementById('phone').value,
        address: document.getElementById('address').value,
        city: document.getElementById('city').value,
        state: document.getElementById('state').value,
        zipCode: document.getElementById('zipCode').value
      };

      // Ensure tokenization is available
      if (!hostedTokenization) {
        throw new Error('Secure payment system is not available. Please refresh the page and try again.');
      }

      // Use secure tokenization only
      console.log('Processing payment with secure tokenization...');
      const tokenResult = await hostedTokenization.getNonceToken();
      
      const paymentData = {
        planId,
        customer: customerData,
        payment: {
          token: tokenResult.nonce,
          maskedCard: tokenResult.maskedCard,
          cardType: tokenResult.cardType,
          last4: tokenResult.last4,
          expiryMonth: tokenResult.expiryMonth,
          expiryYear: tokenResult.expiryYear
        },
        billing: {
          sameBillingAddress: document.getElementById('sameBillingAddress').checked
        },
        marketing: {
          emailConsent: document.getElementById('emailMarketingConsent').checked,
          smsConsent: document.getElementById('smsMarketingConsent').checked
        },
        plan
      };

      console.log('Processing payment:', paymentData);

      const response = await fetch('/api/process-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(paymentData)
      });

      const result = await response.json();

      if (result.success) {
        processingModal.classList.add('hidden');
        successModal.classList.remove('hidden');
      } else {
        console.error('Payment processing failed:', result);
        if (result.debug) {
          console.error('Debug info - Request sent:', result.debug.sentRequest);
          console.error('Debug info - API Response:', result.debug.fullResponse);
        }
        throw new Error(result.error || 'Payment failed');
      }

    } catch (error) {
      console.error('Payment processing error:', error);
      processingModal.classList.add('hidden');
      showError(error.message || 'Payment processing failed');
    } finally {
      processButton.disabled = false;
    }
  }

  function showError(message) {
    const errorDiv = document.getElementById('payment-error');
    errorDiv.textContent = message;
    errorDiv.classList.remove('hidden');
  }
</script>

<style>
  .error-message:empty {
    display: none;
  }
  
  .processing-text {
    display: none;
  }
  
  button:disabled .processing-text {
    display: inline;
  }
  
  button:disabled .default-text {
    display: none;
  }
  
  /* Style the iframe container */
  #micamp-iframe-container iframe {
    border: none !important;
    width: 100% !important;
    min-height: 200px !important;
  }
</style>